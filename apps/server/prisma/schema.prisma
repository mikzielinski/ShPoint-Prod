generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  avatarUrl            String?
  role                 Role                  @default(USER)
  lastLoginAt          DateTime?
  status               UserStatus            @default(ACTIVE)
  image                String?
  passwordHash         String?
  invitedAt            DateTime?
  invitedBy            String?
  username             String?               @unique
  invitationsLimit     Int                   @default(0)
  invitationsSent      Int                   @default(0)
  lastInvitationSentAt DateTime?
  suspendedAt          DateTime?
  suspendedBy          String?
  suspendedReason      String?
  suspendedUntil       DateTime?
  cards                Card[]
  characterCollections CharacterCollection[]
  collections          Collection[]
  missionCollections   MissionCollection[]
  setCollections       SetCollection[]
  strikeTeams          StrikeTeam[]
  customCards          CustomMadeCard[]
  customCardShares     CustomCardShare[]
  customCardCollections CustomCardCollection[]
  auditLogs            AuditLog[]

  @@index([createdAt])
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
  @@index([suspendedUntil])
  @@index([suspendedBy])
  @@index([invitedBy])
  @@index([invitationsSent])
  @@index([invitationsLimit])
}

model Card {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  body        Json?
  status      CardStatus @default(DRAFT)
  createdById String
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])

  @@index([slug])
  @@index([status, publishedAt])
  @@index([createdAt])
}

model AllowedEmail {
  id        String    @id @default(cuid())
  email     String    @unique
  role      Role      @default(USER)
  invitedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  usedAt    DateTime?

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([invitedBy])
  @@index([usedAt])
  @@index([expiresAt])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([key])
}

model Collection {
  id        String           @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CollectionItem[]

  @@index([userId])
  @@index([createdAt])
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  cardId       String
  status       ItemStatus @default(OWNED)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, cardId])
  @@index([collectionId])
  @@index([cardId])
  @@index([status])
}

model CharacterCollection {
  id          String   @id @default(cuid())
  userId      String
  characterId String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isFavorite  Boolean  @default(false)
  isOwned     Boolean  @default(false)
  isPainted   Boolean  @default(false)
  isSold      Boolean  @default(false)
  isWishlist  Boolean  @default(false)
  deaths      Int      @default(0)
  kills       Int      @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model SetCollection {
  id         String   @id @default(cuid())
  userId     String
  setId      String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isFavorite Boolean  @default(false)
  isOwned    Boolean  @default(false)
  isPainted  Boolean  @default(false)
  isSold     Boolean  @default(false)
  isWishlist Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, setId])
  @@index([userId])
  @@index([setId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model MissionCollection {
  id          String    @id @default(cuid())
  userId      String
  missionId   String
  notes       String?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isCompleted Boolean   @default(false)
  isFavorite  Boolean   @default(false)
  isLocked    Boolean   @default(false)
  isOwned     Boolean   @default(false)
  isWishlist  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
  @@index([userId])
  @@index([missionId])
  @@index([isOwned])
  @@index([isCompleted])
  @@index([isWishlist])
}

model StrikeTeam {
  id          String                @id @default(cuid())
  userId      String
  name        String
  type        StrikeTeamType        @default(MY_TEAMS)
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  draws       Int                   @default(0)
  isPublished Boolean               @default(false)
  losses      Int                   @default(0)
  squad1Name  String                @default("Squad 1")
  squad2Name  String                @default("Squad 2")
  wins        Int                   @default(0)
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  characters  StrikeTeamCharacter[]

  @@index([userId])
  @@index([type])
  @@index([isPublished])
}

model StrikeTeamCharacter {
  id            String        @id @default(cuid())
  strikeTeamId  String
  characterId   String
  role          CharacterRole
  order         Int
  createdAt     DateTime      @default(now())
  characterName String?
  unitCount     Int           @default(1)
  strikeTeam    StrikeTeam    @relation(fields: [strikeTeamId], references: [id], onDelete: Cascade)

  @@unique([strikeTeamId, characterId])
  @@index([strikeTeamId])
  @@index([characterId])
  @@index([characterName])
}

enum Role {
  USER
  ADMIN
  EDITOR
  GUEST
  API_USER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum CardStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemStatus {
  OWNED
  PAINTED
  WISHLIST
}

enum CollectionStatus {
  OWNED
  PAINTED
  WISHLIST
  SOLD
  FAVORITE
}

enum StrikeTeamType {
  MY_TEAMS
  DREAM_TEAMS
}

enum CharacterRole {
  PRIMARY
  SECONDARY
  SUPPORT
}

enum CustomCardStatus {
  DRAFT
  PUBLISHED
  SHARED
}

model CustomMadeCard {
  id            String            @id @default(cuid())
  name          String
  description   String?
  faction       String
  unitType      CharacterRole
  squadPoints   Int
  stamina       Int
  durability    Int
  force         Int?
  hanker        Int?
  
  // Card data (JSON)
  abilities     Json?             // Array of abilities with names, descriptions, icons
  stances       Json?             // Array of stances with attack/defense data
  portrait      String?           // Base64 encoded image or URL
  
  // Metadata
  status        CustomCardStatus  @default(DRAFT)
  isPublic      Boolean           @default(false)
  authorId      String
  author        User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Sharing
  sharedWith    CustomCardShare[]
  collections   CustomCardCollection[]
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@index([authorId])
  @@index([status])
  @@index([isPublic])
  @@index([faction])
  @@index([unitType])
}

model CustomCardShare {
  id            String        @id @default(cuid())
  cardId        String
  card          CustomMadeCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  sharedWithId  String
  sharedWith    User          @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)
  accepted      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([cardId, sharedWithId])
  @@index([cardId])
  @@index([sharedWithId])
  @@index([accepted])
}

model CustomCardCollection {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId        String
  card          CustomMadeCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  isOwned       Boolean       @default(false)
  isPainted     Boolean       @default(false)
  isWishlist    Boolean       @default(false)
  isFavorite    Boolean       @default(false)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([userId, cardId])
  @@index([userId])
  @@index([cardId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model AuditLog {
  id          String      @id @default(cuid())
  entityType  EntityType
  entityId    String
  action      AuditAction
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  changes     Json?       // Before/after values
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

enum EntityType {
  USER
  CARD
  CHARACTER
  MISSION
  SET
  STRIKE_TEAM
  CUSTOM_CARD
  COLLECTION
  SYSTEM_SETTINGS
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ROLE_CHANGE
  STATUS_CHANGE
  PUBLISH
  UNPUBLISH
  SHARE
  UNSHARE
}
