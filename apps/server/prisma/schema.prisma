generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  name         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  avatarUrl    String?
  role         Role       @default(USER)
  lastLoginAt  DateTime?
  status       UserStatus @default(ACTIVE)
  image        String?
  passwordHash String?
  cards        Card[]
  collections  Collection[]
  characterCollections CharacterCollection[]
  setCollections      SetCollection[]
  missionCollections  MissionCollection[]
  strikeTeams  StrikeTeam[]

  @@index([createdAt])
  @@index([email])
  @@index([role])
  @@index([status])
}

model Card {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  body        Json?
  status      CardStatus @default(DRAFT)
  createdById String
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])

  @@index([slug])
  @@index([status, publishedAt])
  @@index([createdAt])
}

enum Role {
  GUEST
  USER
  EDITOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum CardStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Collection {
  id        String   @id @default(cuid())
  userId    String
  title     String?  // np. "My Painted", "Wishlist"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CollectionItem[]

  @@index([userId])
  @@index([createdAt])
}

model CollectionItem {
  id           String       @id @default(cuid())
  collectionId String
  cardId       String       // ID jednostki/karty (Primary/Secondary/Support/Mission)
  status       ItemStatus   @default(OWNED) // OWNED/PAINTED/WISHLIST
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, cardId])
  @@index([collectionId])
  @@index([cardId])
  @@index([status])
}

enum ItemStatus {
  OWNED
  PAINTED
  WISHLIST
}

// ====== SHATTERPOINT COLLECTION MODELS ======

model CharacterCollection {
  id        String   @id @default(cuid())
  userId    String
  characterId String // ID postaci z characters.json (np. "ahsoka-tano-fulcrum")
  status    CollectionStatus @default(OWNED)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
  @@index([status])
}

model SetCollection {
  id        String   @id @default(cuid())
  userId    String
  setId     String   // ID zestawu (np. "ahsoka-tano-fulcrum-set")
  status    CollectionStatus @default(OWNED)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, setId])
  @@index([userId])
  @@index([setId])
  @@index([status])
}

model MissionCollection {
  id        String   @id @default(cuid())
  userId    String
  missionId String   // ID misji (np. "m01", "m02")
  status    MissionStatus @default(OWNED)
  notes     String?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
  @@index([userId])
  @@index([missionId])
  @@index([status])
}

enum CollectionStatus {
  OWNED     // Posiadane
  PAINTED   // Pomalowane
  WISHLIST  // Lista życzeń
  SOLD      // Sprzedane
  FAVORITE  // Ulubione
}

enum MissionStatus {
  OWNED     // Posiadane
  COMPLETED // Ukończone
  WISHLIST  // Lista życzeń
  LOCKED    // Zablokowane
}

enum StrikeTeamType {
  MY_TEAMS    // Drużyny z posiadanych postaci
  DREAM_TEAMS // Drużyny z wishlisty
}

enum CharacterRole {
  PRIMARY   // Główna postać
  SECONDARY // Postać drugorzędna
  SUPPORT   // Postać wspierająca
}

model StrikeTeam {
  id          String        @id @default(cuid())
  userId      String
  name        String
  type        StrikeTeamType @default(MY_TEAMS)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  characters StrikeTeamCharacter[]

  @@index([userId])
  @@index([type])
}

model StrikeTeamCharacter {
  id            String        @id @default(cuid())
  strikeTeamId  String
  characterId   String        // ID postaci z characters.json
  role          CharacterRole
  order         Int           // Kolejność w drużynie
  createdAt     DateTime      @default(now())

  strikeTeam StrikeTeam @relation(fields: [strikeTeamId], references: [id], onDelete: Cascade)

  @@unique([strikeTeamId, characterId])
  @@index([strikeTeamId])
  @@index([characterId])
}
