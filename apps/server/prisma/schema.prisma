generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                 @id @default(cuid())
  email                  String                 @unique
  name                   String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  avatarUrl              String?
  role                   Role                   @default(USER)
  lastLoginAt            DateTime?
  status                 UserStatus             @default(ACTIVE)
  image                  String?
  passwordHash           String?
  invitedAt              DateTime?
  invitedBy              String?
  username               String?                @unique
  invitationsLimit       Int                    @default(0)
  invitationsSent        Int                    @default(0)
  lastInvitationSentAt   DateTime?
  suspendedAt            DateTime?
  suspendedBy            String?
  suspendedReason        String?
  suspendedUntil         DateTime?
  accessRequestsReviewed AccessRequest[]        @relation("AccessRequestReviewedBy")
  apiTokens              ApiToken[]
  auditLogs              AuditLog[]
  cards                  Card[]
  challengesReceived     Challenge[]            @relation("ChallengeChallenged")
  challengesSent         Challenge[]            @relation("ChallengeChallenger")
  createdCharacters      Character[]            @relation("CharacterCreatedBy")
  updatedCharacters      Character[]            @relation("CharacterUpdatedBy")
  characterCollections   CharacterCollection[]
  characterStates        CharacterState[]       @relation("CharacterStatePlayer")
  collections            Collection[]
  comments               Comment[]              @relation("CommentAuthor")
  commentLikes           CommentLike[]          @relation("CommentLikes")
  customCardCollections  CustomCardCollection[]
  customCardShares       CustomCardShare[]
  customCards            CustomMadeCard[]
  diceRolls              DiceRoll[]             @relation("DiceRollPlayer")
  gameRegistrations      GameRegistration[]     @relation("GameRegistrations")
  gameReminders          GameReminder[]         @relation("GameReminders")
  gameResultsAsPlayer1   GameResult[]           @relation("GameResultPlayer1")
  gameResultsAsPlayer2   GameResult[]           @relation("GameResultPlayer2")
  gameResultsReported    GameResult[]           @relation("GameResultReportedBy")
  gameResultsWon         GameResult[]           @relation("GameResultWinner")
  gameResultCharacters   GameResultCharacter[]  @relation("GameResultCharacterPlayer")
  inboxMessages          InboxMessage[]         @relation("InboxRecipient")
  sentMessages           InboxMessage[]         @relation("InboxSender")
  missionCollections     MissionCollection[]
  nodeActivations        NodeActivation[]       @relation("NodeActivationPlayer")
  gamesAsPlayer1         ScheduledGame[]        @relation("ScheduledGamePlayer1")
  gamesAsPlayer2         ScheduledGame[]        @relation("ScheduledGamePlayer2")
  setCollections         SetCollection[]
  strikeTeams            StrikeTeam[]
  trustedIPsCreated      TrustedIP[]            @relation("TrustedIPCreatedBy")
  invitationsSentRel     UserInvitation[]       @relation("UserInvitations")
  invitedByRel           UserInvitation?        @relation("UserInvitedBy")

  @@index([createdAt])
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([status])
  @@index([suspendedUntil])
  @@index([suspendedBy])
  @@index([invitedBy])
  @@index([invitationsLimit])
}

model UserInvitation {
  id        String    @id @default(cuid())
  email     String    @unique
  invitedBy String
  invitedAt DateTime  @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedBy    String?   @unique
  inviter   User      @relation("UserInvitations", fields: [invitedBy], references: [id])
  user      User?     @relation("UserInvitedBy", fields: [usedBy], references: [id])

  @@index([email])
  @@index([invitedBy])
  @@index([expiresAt])
  @@index([usedAt])
}

model Card {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  body        Json?
  status      CardStatus @default(DRAFT)
  createdById String
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])

  @@index([slug])
  @@index([status, publishedAt])
  @@index([createdAt])
}

model AllowedEmail {
  id        String    @id @default(cuid())
  email     String    @unique
  role      Role      @default(USER)
  invitedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  usedAt    DateTime?

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([invitedBy])
  @@index([usedAt])
  @@index([expiresAt])
}

model TrustedIP {
  id            String   @id @default(cuid())
  ip            String   @unique
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  createdBy     String?
  createdByUser User?    @relation("TrustedIPCreatedBy", fields: [createdBy], references: [id])

  @@index([ip])
  @@index([isActive])
  @@index([createdBy])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([key])
}

model Collection {
  id        String           @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CollectionItem[]

  @@index([userId])
  @@index([createdAt])
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  cardId       String
  status       ItemStatus @default(OWNED)
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, cardId])
  @@index([collectionId])
  @@index([cardId])
  @@index([status])
}

model CharacterCollection {
  id          String    @id @default(cuid())
  userId      String
  characterId String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isFavorite  Boolean   @default(false)
  isOwned     Boolean   @default(false)
  isPainted   Boolean   @default(false)
  isSold      Boolean   @default(false)
  isWishlist  Boolean   @default(false)
  deaths      Int       @default(0)
  kills       Int       @default(0)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([userId])
  @@index([characterId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model SetCollection {
  id         String   @id @default(cuid())
  userId     String
  setId      String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isFavorite Boolean  @default(false)
  isOwned    Boolean  @default(false)
  isPainted  Boolean  @default(false)
  isSold     Boolean  @default(false)
  isWishlist Boolean  @default(false)
  set        Set      @relation(fields: [setId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, setId])
  @@index([userId])
  @@index([setId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model MissionCollection {
  id          String    @id @default(cuid())
  userId      String
  missionId   String
  notes       String?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isCompleted Boolean   @default(false)
  isFavorite  Boolean   @default(false)
  isLocked    Boolean   @default(false)
  isOwned     Boolean   @default(false)
  isWishlist  Boolean   @default(false)
  mission     Mission   @relation(fields: [missionId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
  @@index([userId])
  @@index([missionId])
  @@index([isOwned])
  @@index([isCompleted])
  @@index([isWishlist])
}

model StrikeTeam {
  id                       String                @id @default(cuid())
  userId                   String
  name                     String
  type                     StrikeTeamType        @default(MY_TEAMS)
  description              String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  draws                    Int                   @default(0)
  isPublished              Boolean               @default(false)
  losses                   Int                   @default(0)
  squad1Name               String                @default("Squad 1")
  squad2Name               String                @default("Squad 2")
  wins                     Int                   @default(0)
  challengesAsChallenger   Challenge[]           @relation("ChallengeChallengerTeam")
  gameResultsAsPlayer1Team GameResult[]          @relation("GameResultPlayer1Team")
  gameResultsAsPlayer2Team GameResult[]          @relation("GameResultPlayer2Team")
  gamesAsPlayer1Team       ScheduledGame[]       @relation("ScheduledGamePlayer1Team")
  gamesAsPlayer2Team       ScheduledGame[]       @relation("ScheduledGamePlayer2Team")
  user                     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  characters               StrikeTeamCharacter[]

  @@index([userId])
  @@index([type])
  @@index([isPublished])
}

model StrikeTeamCharacter {
  id            String        @id @default(cuid())
  strikeTeamId  String
  characterId   String
  role          CharacterRole
  order         Int
  createdAt     DateTime      @default(now())
  characterName String?
  unitCount     Int           @default(1)
  character     Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  strikeTeam    StrikeTeam    @relation(fields: [strikeTeamId], references: [id], onDelete: Cascade)

  @@unique([strikeTeamId, characterId])
  @@index([strikeTeamId])
  @@index([characterId])
  @@index([characterName])
}

model CustomMadeCard {
  id          String                 @id @default(cuid())
  name        String
  description String?
  faction     String
  unitType    CharacterRole
  squadPoints Int
  stamina     Int
  durability  Int
  force       Int?
  hanker      Int?
  abilities   Json?
  stances     Json?
  portrait    String?
  status      CustomCardStatus       @default(DRAFT)
  isPublic    Boolean                @default(false)
  authorId    String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  collections CustomCardCollection[]
  sharedWith  CustomCardShare[]
  author      User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([status])
  @@index([isPublic])
  @@index([faction])
  @@index([unitType])
}

model CustomCardShare {
  id           String         @id @default(cuid())
  cardId       String
  sharedWithId String
  accepted     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  card         CustomMadeCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  sharedWith   User           @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)

  @@unique([cardId, sharedWithId])
  @@index([cardId])
  @@index([sharedWithId])
  @@index([accepted])
}

model CustomCardCollection {
  id         String         @id @default(cuid())
  userId     String
  cardId     String
  isOwned    Boolean        @default(false)
  isPainted  Boolean        @default(false)
  isWishlist Boolean        @default(false)
  isFavorite Boolean        @default(false)
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  card       CustomMadeCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
  @@index([userId])
  @@index([cardId])
  @@index([isOwned])
  @@index([isPainted])
  @@index([isWishlist])
}

model AuditLog {
  id          String      @id @default(cuid())
  entityType  EntityType
  entityId    String
  action      AuditAction
  userId      String?
  changes     Json?
  description String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  user        User?       @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Character {
  id                      String                @id @default(cuid())
  name                    String
  slug                    String                @unique
  faction                 String
  unitType                String
  squadPoints             Int
  stamina                 Int
  durability              Int
  force                   Int?
  hanker                  Int?
  boxSetCode              String?
  characterNames          String
  numberOfCharacters      Int                   @default(1)
  era                     String[]
  period                  String[]
  tags                    String[]
  factions                String[]
  portraitUrl             String?
  imageUrl                String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  createdBy               String?
  updatedBy               String?
  version                 Int                   @default(1)
  isActive                Boolean               @default(true)
  createdByUser           User?                 @relation("CharacterCreatedBy", fields: [createdBy], references: [id])
  updatedByUser           User?                 @relation("CharacterUpdatedBy", fields: [updatedBy], references: [id])
  abilities               CharacterAbility[]
  characterCollections    CharacterCollection[]
  stances                 CharacterStance?
  characterStates         CharacterState[]
  diceRolls               DiceRoll[]
  diceRollsAsSource       DiceRoll[]            @relation("DiceRollTarget")
  gameResultCharacters    GameResultCharacter[]
  nodeActivations         NodeActivation[]
  nodeActivationsAsTarget NodeActivation[]      @relation("NodeActivationTarget")
  setCharacters           SetCharacter[]
  strikeTeamCharacters    StrikeTeamCharacter[]

  @@index([faction])
  @@index([unitType])
  @@index([boxSetCode])
  @@index([isActive])
  @@index([name])
  @@index([squadPoints])
  @@index([createdAt])
  @@index([updatedAt])
}

model CharacterAbility {
  id          String    @id @default(cuid())
  characterId String
  name        String
  type        String
  symbol      String
  trigger     String
  isAction    Boolean   @default(false)
  forceCost   Int       @default(0)
  damageCost  Int       @default(0)
  description String
  tags        String[]
  legacyText  String?
  legacyTitle String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([characterId])
  @@index([type])
  @@index([order])
  @@index([characterId, order])
}

model CharacterStance {
  id              String    @id @default(cuid())
  characterId     String    @unique
  attackDice      Int
  defenseDice     Int
  meleeExpertise  Int
  rangedExpertise Int
  tree            Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  character       Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([characterId])
}

model Set {
  id             String          @id @default(cuid())
  name           String
  code           String          @unique
  type           SetType
  description    String?
  productUrl     String?
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  characters     SetCharacter[]
  setCollections SetCollection[]

  @@index([code])
  @@index([type])
  @@index([isActive])
  @@index([name])
}

model SetCharacter {
  id          String        @id @default(cuid())
  setId       String
  characterId String?
  role        CharacterRole
  name        String
  character   Character?    @relation(fields: [characterId], references: [id])
  set         Set           @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@unique([setId, characterId])
  @@index([setId])
  @@index([characterId])
  @@index([role])
}

model Mission {
  id                 String              @id @default(cuid())
  name               String
  source             String
  setCode            String?
  description        String?
  thumbnailUrl       String?
  mapSizeInch        Int
  mapUnit            String
  mapOrigin          String
  mapAxis            String
  pointDiameterInch  Float
  pointColorActive   String
  pointColorInactive String
  tags               String[]
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isActive           Boolean             @default(true)
  gameResults        GameResult[]
  gameSessions       GameSession[]
  missionCollections MissionCollection[]
  objectives         MissionObjective[]
  struggles          MissionStruggle[]
  scheduledGames     ScheduledGame[]

  @@index([source])
  @@index([setCode])
  @@index([isActive])
  @@index([name])
}

model MissionObjective {
  id        String  @id @default(cuid())
  missionId String
  key       String
  x         Float
  y         Float
  radius    Float
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([missionId])
  @@index([missionId, key])
}

model MissionStruggle {
  id        String  @id @default(cuid())
  missionId String
  index     Int
  cards     Json
  mission   Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@index([missionId])
  @@index([missionId, index])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  type      CommentType
  entityId  String
  authorId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isDeleted Boolean       @default(false)
  deletedAt DateTime?
  deletedBy String?
  parentId  String?
  author    User          @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  likes     CommentLike[]

  @@index([type, entityId])
  @@index([authorId])
  @@index([createdAt])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("CommentLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model InboxMessage {
  id          String    @id @default(cuid())
  recipientId String
  senderId    String?
  type        String
  title       String
  content     String
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  data        Json?
  recipient   User      @relation("InboxRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User?     @relation("InboxSender", fields: [senderId], references: [id])

  @@index([recipientId, isRead])
  @@index([createdAt])
}

model Challenge {
  id                     String          @id @default(cuid())
  challengerId           String
  challengedId           String
  status                 ChallengeStatus @default(PENDING)
  preferredMissions      String[]
  challengerStrikeTeamId String?
  language               String          @default("en")
  location               String?
  address                String?
  reservationCost        Decimal?        @db.Decimal(10, 2)
  description            String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  acceptedAt             DateTime?
  declinedAt             DateTime?
  cancelledAt            DateTime?
  completedAt            DateTime?
  challenged             User            @relation("ChallengeChallenged", fields: [challengedId], references: [id], onDelete: Cascade)
  challenger             User            @relation("ChallengeChallenger", fields: [challengerId], references: [id], onDelete: Cascade)
  challengerStrikeTeam   StrikeTeam?     @relation("ChallengeChallengerTeam", fields: [challengerStrikeTeamId], references: [id])
  scheduledGame          ScheduledGame?

  @@index([challengerId])
  @@index([challengedId])
  @@index([status])
  @@index([createdAt])
}

model ScheduledGame {
  id                  String             @id @default(cuid())
  challengeId         String?            @unique
  player1Id           String
  player2Id           String?
  status              GameStatus         @default(SCHEDULED)
  scheduledDate       DateTime
  location            String?
  address             String?
  missionId           String?
  player1StrikeTeamId String?
  player2StrikeTeamId String?
  notes               String?
  isPublic            Boolean            @default(false)
  maxPlayers          Int?               @default(2)
  city                String?
  country             String?
  skillLevel          String?
  isPaid              Boolean            @default(false)
  totalCost           Float?
  currency            String?            @default("PLN")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  confirmedAt         DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  registrations       GameRegistration[]
  reminders           GameReminder[]
  gameResult          GameResult?
  challenge           Challenge?         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  mission             Mission?           @relation(fields: [missionId], references: [id])
  player1             User               @relation("ScheduledGamePlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player1StrikeTeam   StrikeTeam?        @relation("ScheduledGamePlayer1Team", fields: [player1StrikeTeamId], references: [id])
  player2             User?              @relation("ScheduledGamePlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  player2StrikeTeam   StrikeTeam?        @relation("ScheduledGamePlayer2Team", fields: [player2StrikeTeamId], references: [id])

  @@index([player1Id])
  @@index([player2Id])
  @@index([scheduledDate])
  @@index([status])
  @@index([isPublic])
  @@index([city])
  @@index([country])
  @@index([city, country])
}

model GameReminder {
  id              String        @id @default(cuid())
  gameId          String
  userId          String
  type            ReminderType
  reminderTime    DateTime
  isSent          Boolean       @default(false)
  isEnabled       Boolean       @default(true)
  sentAt          DateTime?
  calendarEventId String?
  createdAt       DateTime      @default(now())
  game            ScheduledGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user            User          @relation("GameReminders", fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameId])
  @@index([userId])
  @@index([reminderTime])
}

model GameRegistration {
  id               String                 @id @default(cuid())
  gameId           String
  userId           String
  status           GameRegistrationStatus @default(PENDING)
  registeredAt     DateTime               @default(now())
  approvedAt       DateTime?
  rejectedAt       DateTime?
  waitlistPosition Int?
  notes            String?
  game             ScheduledGame          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user             User                   @relation("GameRegistrations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
  @@index([gameId])
  @@index([userId])
  @@index([status])
  @@index([waitlistPosition])
}

model GameResult {
  id                  String                @id @default(cuid())
  player1Id           String
  player2Id           String
  winnerId            String?
  result              GameResultType
  mode                GameMode              @default(CASUAL)
  missionId           String?
  player1StrikeTeamId String?
  player2StrikeTeamId String?
  roundsPlayed        Int                   @default(1)
  durationMinutes     Int?
  location            String?
  notes               String?
  scheduledGameId     String?               @unique
  playedAt            DateTime              @default(now())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  reportedById        String
  isVerified          Boolean               @default(false)
  verifiedAt          DateTime?
  verifiedBy          String?
  mission             Mission?              @relation(fields: [missionId], references: [id])
  player1             User                  @relation("GameResultPlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player1StrikeTeam   StrikeTeam?           @relation("GameResultPlayer1Team", fields: [player1StrikeTeamId], references: [id])
  player2             User                  @relation("GameResultPlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  player2StrikeTeam   StrikeTeam?           @relation("GameResultPlayer2Team", fields: [player2StrikeTeamId], references: [id])
  reportedBy          User                  @relation("GameResultReportedBy", fields: [reportedById], references: [id], onDelete: Cascade)
  scheduledGame       ScheduledGame?        @relation(fields: [scheduledGameId], references: [id])
  winner              User?                 @relation("GameResultWinner", fields: [winnerId], references: [id])
  characterResults    GameResultCharacter[]
  gameSession         GameSession?

  @@index([player1Id])
  @@index([player2Id])
  @@index([winnerId])
  @@index([playedAt])
  @@index([mode])
  @@index([missionId])
}

model GameResultCharacter {
  id                String     @id @default(cuid())
  gameResultId      String
  characterId       String
  playerId          String
  damageDealt       Int        @default(0)
  damageTaken       Int        @default(0)
  abilitiesUsed     Int        @default(0)
  objectivesSecured Int        @default(0)
  isMVP             Boolean    @default(false)
  character         Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  gameResult        GameResult @relation(fields: [gameResultId], references: [id], onDelete: Cascade)
  player            User       @relation("GameResultCharacterPlayer", fields: [playerId], references: [id], onDelete: Cascade)

  @@index([gameResultId])
  @@index([characterId])
  @@index([playerId])
}

model GameSession {
  id                String           @id @default(cuid())
  gameResultId      String           @unique
  missionId         String
  startingPositions Json
  setupData         Json?
  currentTier       StruggleTier     @default(TIER_1)
  isActive          Boolean          @default(true)
  startedAt         DateTime         @default(now())
  completedAt       DateTime?
  characterStates   CharacterState[]
  diceRolls         DiceRoll[]
  gameResult        GameResult       @relation(fields: [gameResultId], references: [id], onDelete: Cascade)
  mission           Mission          @relation(fields: [missionId], references: [id])
  nodeActivations   NodeActivation[]
  struggleCards     StruggleCard[]

  @@index([gameResultId])
  @@index([missionId])
  @@index([startedAt])
}

model StruggleCard {
  id              String         @id @default(cuid())
  gameSessionId   String
  tier            StruggleTier
  cardName        String
  cardDescription String?
  cardImageUrl    String?
  selectedBy      String?
  isActive        Boolean        @default(false)
  isCompleted     Boolean        @default(false)
  winnerId        String?
  result          GameResultType
  selectedAt      DateTime       @default(now())
  completedAt     DateTime?
  gameSession     GameSession    @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)

  @@index([gameSessionId])
  @@index([tier])
  @@index([selectedBy])
}

model CharacterState {
  id                String          @id @default(cuid())
  gameSessionId     String
  characterId       String
  playerId          String
  currentStamina    Int
  currentDurability Int
  currentForce      Int?
  currentHanker     Int?
  status            CharacterStatus @default(NORMAL)
  statusDuration    Int?
  damageDealt       Int             @default(0)
  damageTaken       Int             @default(0)
  abilitiesUsed     Int             @default(0)
  objectivesSecured Int             @default(0)
  isMVP             Boolean         @default(false)
  currentPosition   Json?
  updatedAt         DateTime        @updatedAt
  character         Character       @relation(fields: [characterId], references: [id], onDelete: Cascade)
  gameSession       GameSession     @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player            User            @relation("CharacterStatePlayer", fields: [playerId], references: [id], onDelete: Cascade)

  @@index([gameSessionId])
  @@index([characterId])
  @@index([playerId])
  @@index([status])
}

model DiceRoll {
  id                String       @id @default(cuid())
  gameSessionId     String
  characterId       String
  playerId          String
  diceType          DiceType
  diceCount         Int
  diceResults       DiceResult[]
  action            String?
  targetCharacterId String?
  modifiers         Json?
  finalResult       String?
  rolledAt          DateTime     @default(now())
  character         Character    @relation(fields: [characterId], references: [id], onDelete: Cascade)
  gameSession       GameSession  @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player            User         @relation("DiceRollPlayer", fields: [playerId], references: [id], onDelete: Cascade)
  targetCharacter   Character?   @relation("DiceRollTarget", fields: [targetCharacterId], references: [id])

  @@index([gameSessionId])
  @@index([characterId])
  @@index([playerId])
  @@index([diceType])
  @@index([rolledAt])
}

model NodeActivation {
  id                String      @id @default(cuid())
  gameSessionId     String
  characterId       String
  playerId          String
  nodePath          String
  nodeName          String
  nodeEffects       Json
  activationType    String
  triggerAction     String?
  targetCharacterId String?
  effectsApplied    Json?
  damageDealt       Int?
  conditionsApplied String[]
  activatedAt       DateTime    @default(now())
  character         Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  gameSession       GameSession @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  player            User        @relation("NodeActivationPlayer", fields: [playerId], references: [id], onDelete: Cascade)
  targetCharacter   Character?  @relation("NodeActivationTarget", fields: [targetCharacterId], references: [id])

  @@index([gameSessionId])
  @@index([characterId])
  @@index([playerId])
  @@index([activationType])
  @@index([activatedAt])
}

model AccessRequest {
  id             String              @id @default(cuid())
  email          String              @unique
  name           String?
  message        String?
  status         AccessRequestStatus @default(PENDING)
  requestedAt    DateTime            @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  reviewNotes    String?
  reviewedByUser User?               @relation("AccessRequestReviewedBy", fields: [reviewedBy], references: [id])

  @@index([email])
  @@index([status])
  @@index([requestedAt])
}

model ApiToken {
  id         String    @id @default(cuid())
  name       String
  token      String    @unique
  userId     String
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  expiresAt  DateTime?
  scopes     String[]  @default([])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([isActive])
  @@index([expiresAt])
}

enum Role {
  USER
  ADMIN
  EDITOR
  GUEST
  API_USER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum CardStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemStatus {
  OWNED
  PAINTED
  WISHLIST
}

enum CollectionStatus {
  OWNED
  PAINTED
  WISHLIST
  SOLD
  FAVORITE
}

enum StrikeTeamType {
  MY_TEAMS
  DREAM_TEAMS
}

enum CharacterRole {
  PRIMARY
  SECONDARY
  SUPPORT
}

enum CustomCardStatus {
  DRAFT
  PUBLISHED
  SHARED
}

enum EntityType {
  USER
  CARD
  CHARACTER
  MISSION
  SET
  STRIKE_TEAM
  CUSTOM_CARD
  COLLECTION
  SYSTEM_SETTINGS
  SECURITY
  API_TOKEN
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ROLE_CHANGE
  STATUS_CHANGE
  PUBLISH
  UNPUBLISH
  SHARE
  UNSHARE
  DDOS_DETECTED
}

enum GameRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  WAITLIST
}

enum SetType {
  CORE_SET
  SQUAD_PACK
  TERRAIN_PACK
  DUEL_PACK
  MISSION_PACK
  ACCESSORIES
}

enum CommentType {
  CHARACTER
  STRIKE_TEAM
  SET
  MISSION
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  PRO
}

enum GameStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReminderType {
  EMAIL
  PUSH_NOTIFICATION
  BOTH
}

enum GameResultType {
  WIN
  LOSS
  DRAW
}

enum GameMode {
  CASUAL
  RANKED
  TOURNAMENT
  FRIENDLY
}

enum StruggleTier {
  TIER_1
  TIER_2
  TIER_3
}

enum CharacterStatus {
  STRAIN
  PINNED
  EXPOSE
  DISARM
  NORMAL
}

enum DiceType {
  ATTACK
  DEFENSE
  EXPERTISE
  FORCE
  DAMAGE
}

enum DiceResult {
  HIT
  CRIT
  BLOCK
  EVADE
  EXPERTISE_SUCCESS
  EXPERTISE_FAIL
  FORCE_SUCCESS
  FORCE_FAIL
  DAMAGE_SUCCESS
  DAMAGE_FAIL
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
